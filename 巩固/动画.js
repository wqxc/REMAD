setTimeout；setInterval;requestAnimationFrame;
计时器一直是javascript动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。
一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；
另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化

大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次
最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms
16.6ms绘制一次是最好的时间间隔。

一般我们使用setInterval()计时器来进行重复绘制的时候，
会有一个问题，就是这个函数接受一个时间参数，表示，多长时间重新绘制一次。
但是，这个时间并不是很精确，他们的机制是把
动画代码添加到浏览器UI线程队列中以等待执行的时间；
只管添加，却并不管是不是按照规定的时间来执行，
所以这个时间是不确定的。
比如：在这个计时器压入队列的时候，前边已经有代码在排队了，那就只能等待当前任务完成之后再进行，
而当前任务没有完成的时候，也许第二个计时器就压入队列了，
那么执行的时候吗，两个计时器是几乎没有时间间隔的先后执行，这样的话，设定的时间就没有意义了。


首先来看setInterval的缺陷，使用setInterval()创建的定时器确保了定时器代码规则地插入队列中。
这个问题在于：如果定时器代码在代码再次添加到队列之前还没完成执行，结果就会导致定时器代码连续运行好几次。
而之间没有间隔。不过幸运的是：
javascript引擎足够聪明，能够避免这个问题。
当且仅当没有该定时器的如何代码实例时，才会将定时器代码添加到队列中。
这确保了定时器代码加入队列中最小的时间间隔为指定时间。


requestAnimationFrame采用系统时间间隔
IE9-浏览器不支持该方法





用setTimeout来模拟一下setInterval

function f(){
  console.log('1')
  var timer = setTimeout(f,100)

}

setTimeout(f,100)

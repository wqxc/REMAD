首先是安装的方式。
第一种：就是script 方式引入。
eg: <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
这种方式就如同，你引入本地的文件是一样一样的。只是，这个文件是网络上的一个资源。
第二种就是npm eg:npm install vue --save-dev
或者是使用，bower。
这些都是随便的，就看你自己的喜好，或者是擅长使用的方式来。

数据：
插值，是使用，双大括号的形式。{{}}
比如：<span>{{text}}</span>

<div id="app">
  <span>{{text}}</span>
</div>
<script>
  var app = new Vue({
    el: '#app',
    data: {
      text: 'Hello Vue!'
    },
  })
</script>

如上，在程序启动的时候，{{text}}会被'Hello Vue'替换掉。
而且，每当，vue的实例app内。data下的text被修改，那么html里的{{text}}也会随之变化，
这就是所谓的双向数据绑定。
但是，加设，你希望<span>文本：{{text}}</span>，不会随着实例的数据变化而变化，
可以这样写<span>文本：{{*text}}</span>
如此一来，vue就会认为中国变量只需要被赋值一次就够了，

另外需要注意的一点是。如果你的变量是异步加载，而且你的网络非常慢的话，你可能会在屏幕中看到{{}}一闪而过，或者是停留比较久的时间。
这是因为，加载的数据需要时间，没有第一时间对{{变量}}进行替换。
而改变的方式如下：
<span v-text="text"></span>

另外的：{{}}内的值全部会被认为是字符串，即使你赋予的值是数字也会被认为是字符串。

如果变量是类似于：'<h1>hello world</h1>',这样的字符串，
在早期的版本里可以选择使用{{{}}}，vue2.0的版本要使用，v-html="变量名"来使用。
在不安全的页面比如注册或者登陆页面千万不要用这个指令。因为会出现XSS攻击。所以千万不要用。
